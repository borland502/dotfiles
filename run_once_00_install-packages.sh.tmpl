#!/usr/bin/env bash

set -euo pipefail

# shellcheck disable=SC2034
export HAS_ALLOW_UNSAFE=y # switch allows has to query the version of commands it does not recognize

# Script can be used with {{ .chezmoi.os }}, WSL (Windows), or MacOS with linuxbrew or homebrew.

  #shellcheck disable=SC1009,SC1050,SC1083,SC1054,SC1072,SC1073
  {{ if (ne .chezmoi.os "darwin") }}
#current session -- load path set by boostrap or current linuxbrew path
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
  {{ end }}

# Update any existing homebrew recipes
brew update

echo "Preparing to install software on $OSTYPE"

# List of brew sw & casks already installed TODO: Replace far slower `brew ls --versions` check that doesn't work with casks
BREWED=$(brew list -1)

# Lists of software to install

## essential foss stuff
essential_brew=(python3 golang p7zip fzf fd bat jq yq pyenv tldr starship vim rsync exa ripgrep lsof)

echo "Installing or updating minimal packages"
for i in ${essential_brew[@]}; do
  if brew ls --versions $i > /dev/null; then
    echo "$i is already installed"
  else
    brew install $i  
  fi  
done

# TODO:  check these plugins as well
echo "Installing misc plugins"
brew install pyenv-virtualenv
brew install pyenv-ccache

# execute the following only if this is an attended install (TTY present)
{{ if (eq .minimal "false") }}

echo "Installing the full course"

# Import decrypted env tokens if not already loaded, especially the Homebrew one
if [[ -z ${HOMEBREW_GITHUB_API_TOKEN+x} ]]; then
  export $(egrep -v '^#' .autoenv.zsh | xargs)
fi  

# Update Path to include helper binaries
export PATH="$PATH:$HOME/bin"

# Get installed brew packages
INSTALLED_PACKAGES=$(brew list)

echo "Installing all homebrew apps"

programming_languages_homebrew=(node typescript)

for i in ${programming_languages_homebrew[@]}; do
  if brew ls --versions $i > /dev/null; then
    echo "$i is already installed"
  else
    brew install $i  
  fi  
done

build_tools_homebrew=(npm)

for i in ${build_tools_homebrew[@]}; do
  if brew ls --versions $i > /dev/null; then
    echo "$i is already installed"
  else
    brew install $i  
  fi  
done

cli_applications_homebrew=(nginx diff-so-fancy prettyping shfmt autopep8 clang-format nvm ncdu htop nmap gdrive gcalcli todo-txt subversion)

for i in ${cli_applications_homebrew[@]}; do  
  if brew ls --versions $i > /dev/null; then
    echo "$i is already installed"
  else
    brew install $i  
  fi  
done

  {{ if (eq .chezmoi.os "darwin") }}
# darwin
  echo "Installing all non-freeware packages with brew cask"

  gui_app_cask=(Vivaldi docker visual-studio-code slack discord dropbox intellij-idea 1password-cli barrier)
  gui_app_cask+=(iterm2 1password viscosity paw the-unarchiver)

  for i in ${gui_app_cask[@]}; do
    if brew ls --versions $i > /dev/null; then
      echo "$i is already installed"
    else
      brew install $i  
    fi  
  done
  {{ else if (eq .chezmoi.os "linux" ) }}
  #linux 

  # flatpak needs the XDG_RUNTIME_DIR and sometimes, in a container it doesn't exist
  if [[ -d /run/user/${UID} ]]; then
      sudo apt install flatpak

      linux_gui_app_cask=(com.jetbrains.IntelliJ-IDEA-Ultimate com.visualstudio.code org.freedesktop.fwupd com.slack.Slack com.discordapp.Discord com.github.debauchee.barrier)

      for i in ${linux_gui_app_cask[@]}; do
        flatpak install -y --noninteractive $i
      done
  fi

    {{ if (.chezmoi.kernel.osrelease | lower | contains "microsoft")}}
  #WSL
  echo "WSL"
    {{ end }}
  {{ else }}
  # other operating system
  {{ end }}
{{ end }}