# syntax=docker/dockerfile:1.4

FROM mcr.microsoft.com/vscode/devcontainers/base:bookworm
LABEL authors="Jeremy Hettenhouser"

RUN \
    --mount=type=cache,target=/var/cache/apt \
    DEBIAN_FRONTEND=noninteractive \
    apt-get \
    -y --allow-downgrades --allow-remove-essential --allow-change-held-packages \
    dist-upgrade && apt-get -yqq install --no-install-recommends curl ca-certificates

# add repo for gum (https://github.com/audacioustux/devcontainers/blob/main/src/common-utils-extras/install.sh)
RUN \
    mkdir -p /etc/apt/keyrings && \
    curl -fsSL https://repo.charm.sh/apt/gpg.key | gpg --dearmor -o /etc/apt/keyrings/charm.gpg && \
    echo "deb [signed-by=/etc/apt/keyrings/charm.gpg] https://repo.charm.sh/apt/ * *" | tee /etc/apt/sources.list.d/charm.list

RUN \
    --mount=type=cache,target=/var/cache/apt \
    DEBIAN_FRONTEND=noninteractive \
    apt-get update && apt-get -yqq install --no-install-recommends \
    {{range .brew.packages -}}
    {{.}} \
    {{end}} \
    gum

# cleanup
RUN apt-get clean &&
    rm -rf /var/lib/apt/lists/*

WORKDIR /home/vscode
USER vscode

ENV HOME /home/vscode
ENV TZ="America/New_York"
ENV USER_ID=1000

ENV XDG_BIN_HOME ${HOME}/.local/bin
ENV XDG_LIB_HOME ${HOME}/.local/lib
ENV XDG_CONFIG_HOME ${HOME}/.config
ENV XDG_CACHE_HOME ${HOME}/.cache
ENV XDG_DATA_HOME ${HOME}/.local/share

ENV PYENV_ROOT ${XDG_DATA_HOME}/pyenv
ENV NVM_DIR ${XDG_DATA_HOME}/nvm
ENV NONINTERACTIVE 1
ENV PATH $PYENV_ROOT/shims:$PYENV_ROOT/bin:/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:$PATH

WORKDIR ${XDG_DATA_HOME}
# Pyenv - Python install
RUN \
    --mount=type=cache,target=/${XDG_DATA_HOME}/pyenv,uid="${USER_ID}" \
    git clone https://github.com/pyenv/pyenv ${XDG_DATA_HOME}/pyenv && pyenv install "3.12" && pyenv global "3.12"
# NVM - Node install
RUN mkdir -p ${NVM_DIR} && \
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash && \
    \. ${NVM_DIR}/nvm.sh && nvm install --lts && nvm use --lts
WORKDIR ${HOME}

# Brew early, brew often -- this is much faster than the feature install which still uses a full clone
RUN NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

# Run this as a distinct step so that brew populates autocomplete and other shell addons to zsh rather than bash
RUN \
    --mount=type=cache,target=${XDG_CACHE_HOME}/Homebrew,uid="${USER_ID}" \
    test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)" && \
    brew install zsh && \
    sudo chsh --shell /home/linuxbrew/.linuxbrew/bin/zsh vscode && zsh

RUN \
    --mount=type=cache,target=${XDG_CACHE_HOME}/Homebrew,uid="${USER_ID}" \
    test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)" && \
    brew install \
    {{range .brew.packages -}}
    {{.}} \
    {{end}}

RUN \. ${NVM_DIR}/nvm.sh && npm install -g \
    {{range .npm.global_packages -}}
    {{.}} \
    {{end}}

RUN pipx ensurepath && pipx install --include-deps \
    {{range .pipx.packages -}}
    {{.}} \
    {{end}}
    && \
    pipx inject --include-apps ansible argcomplete

# COPY --chown=vscode:vscode "./.zshrc" "/home/vscode/.zshrc"

ENTRYPOINT ["sleep", "infinity"]
