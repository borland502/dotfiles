# chezmoi:template:left-delimiter="##" right-delimiter=##
version: "3"

vars:
  PYTEST_PREFIX: pytest
  POLY_BASES: "${DASBOOTSTRAP_HOME}/bases/**/*"
  POLY_COMPONENTS: "${DASBOOTSTRAP_HOME}/components/**/*"
  PYTHON_SRC:
    sh: fd --glob "*.py" | tr '\n' ' '
  SCRIPTS:
    sh: fd --no-ignore --glob '*.sh' | tr '\n' ' '

includes:
  inv:
    taskfile: "{{.XDG_CONFIG_HOME}}/taskfiles/inventory.yaml"
    dir: "${DASBOOTSTRAP_HOME}"

tasks:
  adhoc:
    desc: Use an ad-hoc ansible command to execute a local script on a remote machine
    cmds:
      - "{{.ANSIBLE}} all -m ansible.builtin.setup {{.ANSIBLE_ALL_INV_SUFFIX}}"
    ignore_error: true

  build:
    desc: Build all projects
    deps:
      - task: poetry:shell
    cmds:
      - "{{.POETRY}} build-project"
    sources:
      - "{{.POLY_BASES}}"
      - "{{.POLY_COMPONENTS}}"
    generates:
      - "${DASBOOTSTRAP_HOME}/dist/*.whl"

  poetry:init:
    desc: Initialize new poetry project
    status:
      - test -f pyproject.toml
    cmds:
      - "poetry init --no-interaction"

  poetry:shell:
    desc: Initialize the virtual environment for this project
    status:
      - test -d ${DASBOOTSTRAP_HOME}/.venv
    cmds:
      - "poetry shell"

  poetry:install:
    desc: Install the poetry packages if missing
    deps:
      - task: poetry:init
      - task: poetry:shell
    cmds:
      - "{{.RUN_PREFIX}} lock"
      - "{{.RUN_PREFIX}} install --no-root"
    sources:
      - "${DASBOOTSTRAP_HOME}/.venv/lib/python{{.PYTHON_VER}}/site-packages"
      - "${DASBOOTSTRAP_HOME}/.venv/lib64/python{{.PYTHON_VER}}/site-packages"
      - "${DASBOOTSTRAP_HOME}/pyproject.toml"

  venv:install:
    desc: Install the dasbootstrap project to the venv
    deps:
      - task: build
    cmds:
      - "pip install ${DASBOOTSTRAP_HOME}/dist/*.whl"
    sources:
      - "${DASBOOTSTRAP_HOME}/dist/*.whl"
    generates:
      - "${DASBOOTSTRAP_HOME}/.venv/lib/python{{.PYTHON_VER}}/site-packages/dasbootstrap"

  update:containers:
    deps:
      - task: poetry:shell
    desc: Update lxc and kvm containers
    cmds:
      - "{{.DBS_VENV_PYTHON}} {{.DBS_MODULE_DASBOOTSTRAP}} update-containers --user ansible 2>/dev/null"

  create:kvm:
    desc: Create a KVM by hostname
    cmds:
      - |
        "{{.DBS_VENV_PYTHON}} {{.DBS_MODULE_DASBOOTSTRAP}} create-kvm --app-name {{.KVM_HOST}} 2>/dev/null"
    vars:
      KVM_HOST:
        sh: |
          echo $(gum input --prompt="What is the hostname for the KVM template? " --placeholder "kvm")
  create:lxc:
    desc: Create an LXC by hostname
    deps:
      - task: venv:install
    cmds:
      - |
        poetry run python -m {{.DBS_MODULE_DASBOOTSTRAP}} create-lxc --app-name '{{ .LXC_HOST }}'
    vars:
      LXC_HOST:
        sh: |
          echo "$(find ~/.ansible/inventory/host_vars -name "*.yaml" -exec sh -c 'basename {} .yaml' \; | gum choose)"

  destroy:lxc:
    desc: Destroy an LXC by hostname
    cmds:
      - |
        {{.DBS_VENV_PYTHON}} {{.DBS_MODULE_DASBOOTSTRAP}} destroy --app-name -- {{.CLI_ARGS}} 2>/dev/null
    vars:
      LXC_HOST:
        sh: |
          echo $(gum input --prompt="What is the hostname for the LXC template? " --placeholder "lxc")
  update-collections:
    internal: true
    deps:
      - task: update-external-srcs
    desc: Update the available ansible collections using ~/.ansible/collections/requirements.yml
    cmds:
      - |
        {{.DBS_VENV_PYTHON}} {{.DBS_MODULE_DASBOOTSTRAP}} update-collections 2>/dev/null
  update-roles:
    deps:
      - task: update-external-srcs
    internal: true
    desc: Update the available ansible roles using ~/.ansible/roles/requirements.yml
    cmds:
      - |
        {{.DBS_VENV_PYTHON}} {{.DBS_MODULE_DASBOOTSTRAP}} update-roles 2>/dev/null

  update-external-srcs:
    silent: true
    internal: true
    run: "once"
    desc: Download and validate external sources ansible depends upon
    cmds:
      - "{{.ANSIBLE_PLAYBOOK}} {{.ANSIBLE_HOME}}/playbooks/maintainence/find_sqlite.yaml {{.ANSIBLE_ALL_INV_SUFFIX}}/ 2>/dev/null"
      - "cp ${DASBOOTSTRAP_HOME}/ansible/collections/requirements.yml {{.ANSIBLE_HOME}}/collections/requirements.yml"
      - "cp ${DASBOOTSTRAP_HOME}/ansible/roles/requirements.yml {{.ANSIBLE_HOME}}/roles/requirements.yml"
    generates:
      - "{{.ANSIBLE_HOME}}/secrets/db.sqlite"

  galaxy:collection:install:
    desc: "Install collections"
    cmds:
      - "{{.ANSIBLE_COLLECTIONS_INSTALL_PREFIX}}"
    dir: "{{.ANSIBLE_HOME}}"

  galaxy:role:install:
    desc: "Install roles"
    cmds:
      - "{{.ANSIBLE_ROLES_INSTALL_PREFIX}}"
    dir: "{{.ANSIBLE_HOME}}"

  update:
    desc: Update dasbootstrap and ansible dependencies
    sources:
      - "{{.HOME}}/.ansible/collections/requirements.yml"
      - "{{.HOME}}/.ansible/roles/requirements.yml"
    generates:
      - "{{.HOME}}/.ansible/collections/**/*.yml"
      - "{{.HOME}}/.ansible/collections/**/*.yaml"
      - "{{.HOME}}/.ansible/roles/**/*.yaml"
      - "{{.HOME}}/.ansible/roles/**/*.yml"
    deps:
      - task: update-roles
      - task: inv:setup
      - task: update-collections
      - task: update-external-srcs
    cmds:
      - task: inv:all:yaml:export
