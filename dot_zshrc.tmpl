# shellcheck shell=bash
# @author Jeremy Hettenhouser
#
# Sources
# https://github.com/zdharma/zinit-configs/blob/master/numToStr/zshrc.zsh

# profiling
# zmodload zsh/zprof

#shellcheck disable=SC1009,SC1050,SC1054,SC1072,SC1073
{{ if (eq .chezmoi.os "darwin") }}

export CLICOLOR=1
export KRB5CCNAME=KCM:jeremy

# Barrier Config
export PATH="$PATH:/Applications/Barrier.app/Contents/MacOS"

{{ else if (eq .chezmoi.os "linux" ) }}
# Linuxbrew
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

  {{ if (.chezmoi.kernel.osrelease | lower | contains "microsoft")}}
  #WSL
  # Hack: Solve slow FZF issue
unsetopt PATH_DIRS
  {{ end }}
{{ else }}

{{ end }}

# TODO: move bin dir to bootstrap only
# Universal
export PATH="/usr/local/bin:/usr/local/sbin:$PATH:${HOME}/.google-drive-upload/bin:${HOME}/bin"

# do not beep at me dammit
setopt NO_BEEP
# no c-s/c-q output freezing
setopt NO_FLOW_CONTROL
# allow expansion in prompts
setopt PROMPT_SUBST
# display PID when suspending processes as well
setopt LONG_LIST_JOBS
# try to avoid the 'zsh: no matches found...'
setopt NONOMATCH
# report the status of backgrounds jobs immediately
setopt NOTIFY
# whenever a command completion is attempted, make sure the entire command path
# is hashed first.
setopt HASH_LIST_ALL
# not just at the end
setopt COMPLETE_IN_WORD
# use zsh style word splitting
setopt NO_SH_WORD_SPLIT
# allow use of comments in interactive code
setopt INTERACTIVE_COMMENTS
# this is default, but set for share_history
setopt APPEND_HISTORY
# If the internal history needs to be trimmed to add the current command line, setting this option will cause the oldest history event that has a duplicate to be lost before losing a unique event from the list. You should be sure to set the value of HISTSIZE to a larger number than SAVEHIST in order to give you some room for the duplicated events, otherwise this option will behave just like HIST_IGNORE_ALL_DUPS once the history fills up with unique events.
setopt HIST_EXPIRE_DUPS_FIRST
# When searching for history entries in the line editor, do not display duplicates of a line previously found, even if the duplicates are not contiguous.
setopt HIST_FIND_NO_DUPS
# If a new command line being added to the history list duplicates an older one, the older command is removed from the list (even if it is not the previous event).
setopt HIST_IGNORE_ALL_DUPS

## History.
HISTFILE="${ZDOTDIR:-$HOME}/.zhistory"
HISTSIZE=100000
SAVEHIST=5000

# partial manual installation to allow for autoomation script to take care of business
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
source "${ZINIT_HOME}/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

autoload -Uz compinit
compinit -u -d "$XDG_CACHE_HOME/zsh/compdump"

# source global shell vars
zi snippet "${HOME}/.autoenv.zsh"


# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

# End of Zinit's installer chunk

# generic plugins to load early and traditionally
zi light rupa/z
zi light MichaelAquilina/zsh-you-should-use

{{ if (eq .chezmoi.os "darwin") }}
    zi snippet ~/.iterm2_shell_integration.zsh
{{ end }}

## Oh My Zsh plugins, libraries, and functions
zinit lucid for \
    atinit"HIST_STAMPS=dd.mm.yyyy" \
    OMZL::history.zsh \

# zsh github plugins
zinit wait lucid for \
	OMZL::clipboard.zsh \
	OMZL::compfix.zsh \
	OMZL::correction.zsh \
	OMZL::termsupport.zsh \
    OMZP::colored-man-pages \
    OMZP::mvn \
    OMZP::npm \
    OMZP::vscode \
    OMZP::python \
    OMZP::aws \
    OMZP::brew \
    OMZP::colorize \
    OMZP::cp \
    OMZP::gcloud \
    OMZP::gpg-agent 

# tools

# zinit wait lucid for \
#     bindmap"^R -> ^H" atinit"
#         zstyle :history-search-multi-word page-size 10
#         zstyle :history-search-multi-word highlight-color fg=red,bold
#         zstyle :plugin:history-search-multi-word reset-prompt-protect 1
#         " \
#         zdharma-continuum/history-search-multi-word \
#         lukechilds/zsh-nvm 

# git completions, only when .git present
zinit wait'git rev-parse --git-dir > /dev/null 2>&1' lucid for \
    OMZL::git.zsh \
    OMZP::git \
    OMZP::git-extras \
    OMZP::tig \
    OMZP::git-flow-avh \
    OMZP::git-auto-fetch \
    paulirish/git-open \
    wfxr/forgit     

zinit wait lucid for \
    atclone"local P=${${(M)OSTYPE:#*darwin*}:+g}
            \${P}sed -i \
            '/DIR/c\DIR 38;5;63;1' LS_COLORS; \
            \${P}dircolors -b LS_COLORS > c.zsh" \
    atpull'%atclone' pick"c.zsh" nocompile'!' \
    atload'zstyle ":completion:*" list-colors “${(s.:.)LS_COLORS}”' \
        trapd00r/LS_COLORS \
    light-mode atinit"ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20" atload"_zsh_autosuggest_start" \
    zsh-users/zsh-autosuggestions \
    zsh-users/zsh-completions \
    zdharma-continuum/fast-syntax-highlighting

export LANG=en_US.UTF-8

# Pyenv
export PYENV_VIRTUALENV_DISABLE_PROMPT=1

# Nodejs
export NVM_AUTO_USE=true

##Liquibase
export LIQUIBASE_HOME="$HOME/Development/bitbucket/liquibase/codb/liquibase-3.2.2"

## Homebrew
export HOMEBREW_CASK_OPTS=--require-sha
export HOMEBREW_NO_INSECURE_REDIRECT=1

#GPG config
export GPG_TTY=$TTY

#Death to Emacs and a thousand hells upon nano
export EDITOR='vi'
export VISUAL='vim'

##Maven
export MAVEN_OPTS="--add-opens java.base/java.lang=ALL-UNNAMED -Xms1024m -Xms2048m -Dmaven.artifact.threads=10"

##IntelliJ
export IDEA_VM_OPTIONS="
-ea
-server
-Xms1024m
-Xmx4096m
-Xss16m
-XX:MaxMetaspaceSize=2G
-XX:MetaspaceSize=1G
-XX:ConcGCThreads=8
-XX:ParallelGCThreads=8
-XX:NewRatio=1
-XX:ReservedCodeCacheSize=240m
-XX:+AlwaysPreTouch
-XX:+UseG1GC
-XX:+DoEscapeAnalysis
-XX:+TieredCompilationUseG1GC
-XX:SoftRefLRUPolicyMSPerMB=50
-XX:+UnlockExperimentalVMOptions
-Dsun.io.useCanonPrefixCache=false
-Djava.net.preferIPv4Stack=true
-Dsun.io.useCanonCaches=false
-XX:LargePageSizeInBytes=256m
-XX:+UseCodeCacheFlushing
-XX:+DisableExplicitGC
-XX:+ExplicitGCInvokesConcurrent
-XX:+PrintGCDetails
-XX:+PrintFlagsFinal
-XX:+AggressiveOpts
-XX:+CMSClassUnloadingEnabled
-XX:CMSInitiatingOccupancyFraction=60
-XX:+CMSParallelRemarkEnabled
-XX:+UseAdaptiveGCBoundary
-XX:+UseSplitVerifier
-XX:CompileThreshold=10000
-XX:+OptimizeStringConcat
-XX:+UseStringCache
-XX:+UseFastAccessorMethods
-XX:+UnlockDiagnosticVMOptions
-Djdk.http.auth.tunneling.disabledSchemes=""
-XX:+HeapDumpOnOutOfMemoryError
-XX:-OmitStackTraceInFastThrow
-Djdk.attach.allowAttachSelf=true
-Dkotlinx.coroutines.debug=off
-Djdk.module.illegalAccess.silent=true
-XX:+UseCompressedOops
-Dfile.encoding=UTF-8
-XX:CICompilerCount=2
-Xverify:none

-XX:ErrorFile=$USER_HOME/java_error_in_idea_%p.log
-XX:HeapDumpPath=$USER_HOME/java_error_in_idea.hprof
-Djavax.net.ssl.trustStore=/usr/local/etc/truststore/dev-20160524-01.truststore
-Djavax.net.ssl.trustStorePassword=changeit
"

#TODO test for autofs
{{ if (eq .chezmoi.os "darwin") }}
  export SCRIPTS="${MAC_SCRIPTS_PATH}"
{{ else }}
  export SCRIPTS="${PC_SCRIPTS_PATH}"  
{{ end }}  

# Functions
# Load all *.zsh files from bin directory 
if [[ -d "$HOME/bin" ]]; then
  for file in "$HOME"/bin/*.zsh; do
    # shellcheck source=/dev/null
    zi snippet "$file"
  done
fi

# Aliases
alias psnginx='ps -ef | grep nginx'
alias startnginx='sudo nginx'
alias stopnginx='sudo nginx -s stop'
alias ping='prettyping --nolegend'
alias preview="fzf --preview 'bat --color \"always\" {}'"

# Override common commands
alias cat="bat --pager=never"
alias top="sudo htop"
alias du="ncdu --color dark -rr -x --exclude .git --exclude node_modules"

alias mvncv=mvn clean verify
alias mvnt='mvn clean test -T1.5C'

alias cdnginx='cd /usr/local/etc/nginx'
alias cdliquibase='cd $HOME/Development/bitbucket/liquibase'
alias cdc="chezmoi cd"
alias cddev='cd $HOME/Development'
alias cdbb='cd $HOME/Development/bitbucket'
alias cda2web='cd $HOME/Development/bitbucket/assist2-web'
alias cda2svc='cd $HOME/Development/bitbucket/assist2-services'
alias cdgh='cd $HOME/Development/github'

alias gcala='gcalcli agenda'
alias gcah="gcalcli --calendar $HASSIO_CAL_NAME quick $1"

# todo.txt
alias tdl='td list'
alias tda='tds add'

#exa replacement aliases from https://github.com/DarrinTisdale/zsh-aliases-exa
## general use
alias ls='exa'                                                          # ls
alias l='exa -lbF --git'                                                # list, size, type, git
alias ll='exa -lbGF --git'                                             # long list
alias llm='exa -lbGd --git --sort=modified'                            # long list, modified date sort
alias la="exa -lbhHigUmuSa --git --color-scale"  # all list
alias lx='exa -lbhHigUmuSa@ --git --color-scale' # all + extended list

## specialty views
alias lS='exa -1'                                                              # one column, just names
alias lt='exa --tree --level=2'                                   # tree

# grep aliases
alias cgrep='rg -uuu -tc -n -w'

# ack aliases

{{ if (eq .chezmoi.os "darwin") }}
  # Open the current directory in a Finder window
  alias ofd='open $PWD'
  alias off='open --reveal $PWD'

  # Show/hide hidden files in the Finder
  alias showfiles="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
  alias hidefiles="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"
{{ end }}

## The price of using an unusual terminal
# alias ssh="kitty +kitten ssh"

# virtual environments
if [[ -x "${command -v pyenv}" ]]; then
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
fi  

# starship prompt
if [[ -x "${command -v starship}" ]]; then
  eval "$(starship init zsh)"
fi

# fzf
export FZF_DEFAULT_COMMAND='fd --type file'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_DEFAULT_COMMAND="fd --type file --color=always"
export FZF_DEFAULT_OPTS="--ansi"

# MOTD

#1Password signin.  Assume set up already by chezmoi
# eval $(op signin my)

#1Password completion
# eval "$(op completion zsh)"
 
alias rsync-copy="rsync -avhi --progress"
alias rsync-move="rsync -avz --progress -h --remove-source-files"
alias rsync-update="rsync -avzu --progress -h"
alias rsync-synchronize="rsync -avzu --delete --progress -h"

if [[ -x "$(command -v sdk)" ]]; then
  export SDKMAN_DIR="$HOME/.sdkman"
  [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
fi  

# end profiling
#zprof