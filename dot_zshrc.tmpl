# shellcheck shell=bash
# @author Jeremy Hettenhouser
#
# Sources
# https://github.com/zdharma/zinit-configs/blob/master/numToStr/zshrc.zsh

# profiling
# zmodload zsh/zprof

# shellcheck disable=SC1009,SC1050,SC1054,SC1072,SC1073

# shellcheck disable=SC1009,SC1050,SC1054,SC1072,SC1073
{{- if eq .chezmoi.os "darwin" }}

export CLICOLOR="1"
export KRB5CCNAME="KCM:jeremy"

# Barrier Config
export PATH="$PATH:/Applications/Barrier.app/Contents/MacOS"

{{- else if eq .chezmoi.os "linux" }}

  # linuxbrew is not installed on arm
  if [[ "$(command -v brew)" ]]; then
    if [[ -d /home/linuxbrew/.linuxbrew ]]; then
      # Linuxbrew
      eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    elif [[ -d "$HOME/.linuxbrew" ]]; then
      eval "$(${HOME}/.linuxbrew/bin/brew shellenv)"
    fi
  fi
  
  {{- if eq .chezmoi.os "microsoft" }}
  # WSL
  # Hack: Solve slow FZF issue
  unsetopt PATH_DIRS
  {{ end }}

{{ else }}

{{ end }}


# Barrier Config
export PATH="$PATH:/Applications/Barrier.app/Contents/MacOS"


export PATH="/usr/local/bin:/usr/local/sbin:$PATH:${HOME}/bin"


export ZSHZ_DATA="$XDG_DATA_HOME/z/.z"

export LANG=en_US.UTF-8

# Docker
export DOCKER_BUILDKIT=1 

# Kubernetes
export PATH="${PATH}:${HOME}/.krew/bin"

# Plugin config vars
export ZSHZ_DATA="$XDG_DATA_HOME/z/.z"

if ! [[ -f "$XDG_DATA_HOME/z" ]]; then
  mkdir -p "$XDG_DATA_HOME/z"
  touch "$ZSHZ_DATA"
fi

export ZSHZ_KEEP_DIRS=(/opt/net /net)
export ZSHZ_CASE=smart

# Pyenv
export PYENV_VIRTUALENV_DISABLE_PROMPT=1

# Nodejs
export NVM_AUTO_USE=true

SSH_AUTH_SOCK="$HOME/.1password/agent.sock"

## Homebrew
export HOMEBREW_CASK_OPTS=--require-sha
export HOMEBREW_NO_INSECURE_REDIRECT=1

#GPG config
export GPG_TTY=$TTY

#Death to Emacs and a thousand hells upon nano
export EDITOR='vi'
export VISUAL='vim'

##Maven
#export MAVEN_OPTS="--add-opens java.base/java.lang=ALL-UNNAMED -Xms1024m -Xms2048m -Dmaven.artifact.threads=10"
# jdk 8 safe options
export MAVEN_OPTS="-Xms1024m -Xms2048m -Dmaven.artifact.threads=10"
export M2_HOME="$HOME/.m2"

# do not beep at me dammit
setopt NO_BEEP
# no c-s/c-q output freezing
setopt NO_FLOW_CONTROL
# allow expansion in prompts
setopt PROMPT_SUBST
# display PID when suspending processes as well
setopt LONG_LIST_JOBS
# try to avoid the 'zsh: no matches found...'
setopt NONOMATCH
# report the status of backgrounds jobs immediately
setopt NOTIFY
# whenever a command completion is attempted, make sure the entire command path
# is hashed first.
setopt HASH_LIST_ALL
# not just at the end
setopt COMPLETE_IN_WORD
# use zsh style word splitting
setopt NO_SH_WORD_SPLIT
# allow use of comments in interactive code
setopt INTERACTIVE_COMMENTS
# this is default, but set for share_history
setopt APPEND_HISTORY
# If the internal history needs to be trimmed to add the current command line, setting this option will cause the oldest history event that has a duplicate to be lost before losing a unique event from the list. You should be sure to set the value of HISTSIZE to a larger number than SAVEHIST in order to give you some room for the duplicated events, otherwise this option will behave just like HIST_IGNORE_ALL_DUPS once the history fills up with unique events.
setopt HIST_EXPIRE_DUPS_FIRST
# When searching for history entries in the line editor, do not display duplicates of a line previously found, even if the duplicates are not contiguous.
setopt HIST_FIND_NO_DUPS
# If a new command line being added to the history list duplicates an older one, the older command is removed from the list (even if it is not the previous event).
setopt HIST_IGNORE_ALL_DUPS

## History.
HISTFILE="${ZDOTDIR:-$HOME}/.zhistory"
HISTSIZE=10000
SAVEHIST=5000

### You down with XDG?  Yeah, you know me
# just in case the directory does not exist yet
[[ -d "$XDG_CONFIG_HOME" ]] || mkdir -p "$XDG_CONFIG_HOME"
[[ -d "$XDG_CACHE_HOME" ]] || mkdir -p "$XDG_CACHE_HOME"
[[ -d "$XDG_DATA_HOME" ]] || mkdir -p "$XDG_DATA_HOME"
[[ -d "$XDG_STATE_HOME" ]] || mkdir -p "$XDG_STATE_HOME"

# partial manual installation to allow for automation script to take care of business
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
[[ -d "$(dirname $ZINIT_HOME)" ]] || mkdir -p "$(dirname $ZINIT_HOME)"
source "${ZINIT_HOME}/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# for some bash adaptations
autoload -U bashcompinit

# source global shell vars
zi snippet "${HOME}/.autoenv.zsh"

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

  # generic plugins to load early and traditionally
  zi light MichaelAquilina/zsh-you-should-use    

# just in case the directory does not exist yet
[[ -d "$ZSH_CACHE_DIR/completions" ]] || mkdir -p "$ZSH_CACHE_DIR/completions"

zinit wait lucid for \
	OMZL::clipboard.zsh \
	OMZL::compfix.zsh \
	OMZL::correction.zsh \
	OMZL::termsupport.zsh \
    OMZP::colored-man-pages \
    OMZP::mvn \
    OMZP::npm \
    OMZP::vscode \
    OMZP::python \
    OMZP::aws \
    OMZP::brew \
    OMZP::colorize \
    OMZP::cp \
    OMZP::gcloud \
    OMZP::gpg-agent \
    OMZP::ansible 

# tools
zinit wait lucid for \
  bindmap"^R -> ^H" atinit"
        zstyle :history-search-multi-word page-size 10
        zstyle :history-search-multi-word highlight-color fg=red,bold
        zstyle :plugin:history-search-multi-word reset-prompt-protect 1
        " \
  zdharma-continuum/history-search-multi-word \
  lukechilds/zsh-nvm

# git completions, only when .git present
zinit wait lucid for \
  OMZL::git.zsh \
  OMZP::git \
  OMZP::git-extras \
  OMZP::tig \
  OMZP::git-flow-avh \
  OMZP::git-auto-fetch \
  paulirish/git-open \
  wfxr/forgit

autoload -U +X bashcompinit && bashcompinit

zinit ice lucid wait='1'
zinit wait lucid for \
  light-mode atinit"ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20" atload"_zsh_autosuggest_start" \
  zsh-users/zsh-autosuggestions \
  zsh-users/zsh-completions \
  agkozak/zsh-z \
  atinit"ZINIT[COMPINIT_OPTS]=-C; zicompinit; zicdreplay" \
  zdharma-continuum/fast-syntax-highlighting \
  as"completion" is-snippet \
  https://github.com/docker/cli/blob/master/contrib/completion/zsh/_docker \
  https://github.com/docker/compose/blob/master/contrib/completion/zsh/_docker-compose \
  https://raw.githubusercontent.com/junegunn/fzf/master/shell/completion.zsh \
  https://raw.githubusercontent.com/junegunn/fzf/master/shell/key-bindings.zsh

if [[ "$(command -v pyenv)" ]]; then
  # virtual environments
  export PYENV_ROOT="$HOME/.pyenv"
  command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"
fi

if [[ "$(command -v starship)" ]]; then
  # starship prompt
  eval "$(starship init zsh)"
fi

if [[ "$(command -v sdk)" ]]; then
  export SDKMAN_DIR="$HOME/.sdkman"
  [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && zi snippet "$HOME/.sdkman/bin/sdkman-init.sh"
fi

if [[ "$(command -v podman)" ]]; then
  source <(podman completion zsh)
fi

alias rsync-cp="rsync -avhi --progress"
alias rsync-mv="rsync -avz --progress -h --remove-source-files"
alias rsync-update="rsync -avzu --progress -h"
alias rsync-sync="rsync -avzu --delete --progress -h"
alias rsync-bak="rsync -avbuh --progress --backup-dir=../archive"

{{- if eq .chezmoi.os "darwin" }}
# Open the current directory in a Finder window
alias ofd='open $PWD'
alias off='open --reveal $PWD'

# Show/hide hidden files in the Finder
alias showfiles="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
alias hidefiles="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"
{{- end }}

# Aliases
alias psnginx='ps -ef | grep nginx'
alias startnginx='sudo nginx'
alias stopnginx='sudo nginx -s stop'
alias ping='prettyping --nolegend'
alias preview="fzf --preview 'bat --color \"always\" {}'"

# Override common commands
alias cat="bat --pager=never"
alias top="sudo htop"
alias du="ncdu --color dark -rr -x --exclude .git --exclude node_modules"

alias mvncv=mvn clean verify
alias mvnt='mvn clean test -T1.5C'

alias cdnginx='cd /usr/local/etc/nginx'
alias cdliquibase='cd $HOME/Development/bitbucket/liquibase'
alias cdc="chezmoi cd"
alias cddev='cd $HOME/Development'
alias cdbb='cd $HOME/Development/bitbucket'
alias cda2web='cd $HOME/Development/bitbucket/assist2-web'
alias cda2svc='cd $HOME/Development/bitbucket/assist2-services'
alias cdgh='cd $HOME/Development/github'

alias gcala='gcalcli agenda'
alias gcah="gcalcli --calendar $HASSIO_CAL_NAME quick $1"

# todo.txt
alias tdl='td list'
alias tda='tds add'

#exa replacement aliases from https://github.com/DarrinTisdale/zsh-aliases-exa
## general use
alias ls='exa --icons'                                   # ls
alias l='exa -lbF --git --icons'                         # list, size, type, git
alias ll='exa -lbGF --git --icons'                       # long list
alias ltr='exa -lbGd --git --sort=modified --icons'      # long list, modified date sort
alias la="exa -lbhHigUmuSa --git --color-scale --icons"  # all list
alias lx='exa -lbhHigUmuSa@ --git --color-scale --icons' # all + extended list

## specialty views
alias lS='exa -1'               # one column, just names
alias lt='exa --tree --level=2' # tree

# grep aliases
alias cgrep='rg -uuu -tc -n -w'

autoload -Uz compinit
compinit -u 